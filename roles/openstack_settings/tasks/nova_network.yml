---

- name: create a user to use the openstack
  user: >
    name={{ operate_user }}
    home={{ operate_user_home }}
    password={{ operate_user_password }}
    shell=/bin/bash
    state=present
    append=yes
    groups=sudo

- name: distribute openrc for admin
  template: >
    src=admin-openrc.sh.j2
    dest={{ operate_user_home }}/admin-openrc.sh
    owner={{ operate_user }}
    group={{ operate_user }}
    mode=0600

- name: distribute openrc for generic01
  template: >
    src=generic01-openrc.sh.j2
    dest={{ operate_user_home }}/generic01-openrc.sh
    owner={{ operate_user }}
    group={{ operate_user }}
    mode=0600

- name: create nova network
  shell: >
    . {{ operate_user_home }}/admin-openrc.sh ; nova network-create                       
    {{ item.key }}
    --fixed-range-v4={{ item.value.fixed_range }}
    --dns1={{ item.value.dns1 }}
    --bridge-interface={{ item.value.bridge_interface }}
    --multi-host=T
  ignore_errors: True
  with_dict: nova_networks
  when: network_type == "nova-network"

- name: secgroup settings
  shell: >
    . {{ operate_user_home }}/admin-openrc.sh ; nova secgroup-add-rule
    {{ item.value.name }}
    {{ item.value.protocol }}
    {{ item.value.from_port }}
    {{ item.value.to_port }}
    {{ item.value.cidr }}
  ignore_errors: True
  with_dict: secgroup_rules
  when: network_type == "nova-network"

- name: secgroup settings
  shell: >
    . {{ operate_user_home }}/admin-openrc.sh ; nova secgroup-add-rule
    {{ item.value.name }}
    {{ item.value.protocol }}
    {{ item.value.from_port }}
    {{ item.value.to_port }}
    {{ item.value.cidr }}
  ignore_errors: True
  with_dict: secgroup_rules
  when: network_type == "nova-network"

- name: floating ip settings
  shell: >
    . {{ operate_user_home }}/admin-openrc.sh ; nova floating-ip-bulk-create {{ item.value.ranges }}
  ignore_errors: True
  with_dict: float_ip_ranges
  when: network_type == "nova-network"

