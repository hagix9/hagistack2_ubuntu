---
- name: pause 5 minutes
  pause: minutes=5

- name: create router
  neutron_router: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    name={{ router_name }}

- name: create internal network for neutron l3
  neutron_network: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    name={{ item.key }}
  with_dict: neutron_l3_internal_networks
  when: network_type == "neutron-l3"

- name: create internal subnet for neutron l3
  neutron_subnet: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    network_name={{ item.key }}
    name={{ item.value.subnet_name }}
    cidr={{ item.value.subnet }}
    gateway_ip={{ item.value.gateway }}
    dns_nameservers={{ item.value.dns1 }},{{ item.value.dns2 }}
  with_dict: neutron_l3_internal_networks
  when: network_type == "neutron-l3"

- name: create router interface add for neutron l3
  neutron_router_interface: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    router_name={{ router_name }}
    subnet_name={{ item.value.subnet_name }}
  with_dict: neutron_l3_internal_networks
  when: network_type == "neutron-l3"

- name: create external network for neutron l3
  neutron_network: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    name={{ item.key }}
    router_external=yes
  with_dict: neutron_l3_external_networks
  when: network_type == "neutron-l3"

- name: create external subnet for neutron l3
  neutron_subnet: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    network_name={{ item.key }}
    name={{ item.value.subnet_name }}
    cidr={{ item.value.subnet }}
    allocation_pool_start={{ item.value.ip_pool_start }}
    allocation_pool_end={{ item.value.ip_pool_end }}
    enable_dhcp=false
    gateway_ip={{ item.value.gateway }}
    dns_nameservers={{ item.value.dns1 }},{{ item.value.dns2 }}
  with_dict: neutron_l3_external_networks
  when: network_type == "neutron-l3"

- name: create router gateway set for neutron l3
  neutron_router_gateway: >
    state=present
    login_username={{ generic_user01 }}
    login_password={{ generic_password01 }}
    login_tenant_name={{ generic_tenant01 }}
    network_name={{ item.key }}
    router_name={{ router_name }}
  with_dict: neutron_l3_external_networks
  when: network_type == "neutron-l3"

- name: secgroup settings
  shell: >
    . {{ operate_user_home }}/generic01-openrc.sh ; nova secgroup-add-rule
    {{ item.value.name }}
    {{ item.value.protocol }}
    {{ item.value.from_port }}
    {{ item.value.to_port }}
    {{ item.value.cidr }}
  ignore_errors: True
  with_dict: secgroup_rules
  when: network_type == "neutron-l3"

